<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

globalvar dt;
dt = 1;

var wratio, hratio, scalesize;
wratio = display_get_width() / view_wview[0];
hratio = display_get_height() / view_hview[0];
if (wratio &lt;= hratio)
{
    scalesize = wratio;
    view_hview[0] = display_get_height() / scalesize;
}
else
{
    scalesize = hratio;
    view_wview[0] = display_get_width() / scalesize;
}
//window_set_size(round(view_wview[0] * scalesize), round(view_hview[0] * scalesize));
window_set_size(display_get_width(), display_get_height());

view_wport[0] = window_get_width();
view_hport[0] = window_get_height();

display_set_gui_size(view_wview[0], view_hview[0]);

surfaceDiv = 2;

surface_resize(application_surface, round(display_get_width() / surfaceDiv / 10) * 10, round(display_get_height() / surfaceDiv / 10) * 10);//view_wport[0], view_hport[0]);

room_width = view_wview[0];
room_height = view_hview[0];

instance_create(x, y, obj_back);

for (var a = 0; a &lt; room_width / 4 + 1; a++)
{
    instance_create(a * 4, 0, obj_block);
    instance_create(a * 4, room_height - 4, obj_block);
}

hpcap = 5;
hpStart = 3;
hp = hpStart;
ySpdStart = .6;
yspd = ySpdStart;
ymov = 0;
yAccStart = .04;
yAcc = yAccStart;
up = false;
down = false;
shoottimecap = room_speed / 5;
shoottime = shoottimecap;
invincibletimecap = room_speed;
invincibletime = invincibletimecap;

deathtimecap = room_speed / 2;
deathtime = deathtimecap;

playTime = 0;
gametime = 0;
gameTimeStart = 0;
blockTimeOffset = irandom(255);
bulletTimeOffset = irandom(255);

globalvar pause;
pause = false;

start = false;

image_speed = 0;

scr = 0;
hScr = 0;

loadScore();

fpsList = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(fpsList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dt = 60 / 1000000 * delta_time;

if (keyboard_check_pressed(vk_escape))
    game_end();

//if (gametime == 2)
    //surface_resize(application_surface, display_get_width(), display_get_height());
gametime += dt;

image_blend = make_color_hsv((gametime + bulletTimeOffset) mod 255, 255, 255);
with (obj_block)
    image_blend = make_color_hsv(((other.gametime + 180) / 2 + other.blockTimeOffset) mod 255, 255, 255);

if (os_is_paused())
    if (start &amp;&amp; hp &gt; 0)
        pause = true;
if (keyboard_check_pressed(vk_backspace) &amp;&amp; start &amp;&amp; hp &gt; 0)
    pause = !pause;

if (!pause)
{
    if (start &amp;&amp; hp &gt; 0)
        if (mouse_check_button_pressed(mb_left) || mouse_check_button_pressed(mb_right))
            if (point_in_rectangle(mouse_x, mouse_y, 0, 0, sprite_get_width(spr_pause) - 1, sprite_get_height(spr_pause) - 1))
                pause = true;
}
else if (mouse_check_button_pressed(mb_left) || mouse_check_button_pressed(mb_right) || keyboard_check_pressed(vk_up) || keyboard_check_pressed(vk_space))
    pause = false;

if (!pause)
{
    
    if (gametime &gt; room_speed * 2)
    {
        ds_list_add(fpsList, fps);
        if (ds_list_size(fpsList) &gt;= room_speed * 4)
        {
            var avg = 0;
            for (var i = 0; i &lt; ds_list_size(fpsList); i++)
                avg += ds_list_find_value(fpsList, i);
            avg = ceil(avg / ds_list_size(fpsList));
            if (room_speed - avg &gt; 3)
            {
                surfaceDiv += 2;
                surface_resize(application_surface, round(display_get_width() / surfaceDiv / 10) * 10, round(display_get_height() / surfaceDiv / 10) * 10);//view_wport[0], view_hport[0]);
            }
            ds_list_clear(fpsList);
        }
    }
    
    up = mouse_check_button(mb_left) || mouse_check_button(mb_right) || keyboard_check(vk_up) || keyboard_check(vk_space);
    if (up &amp;&amp; !start)
    {
        start = true;
        gameTimeStart = gametime - 1;
        playTime = 0;
    }
    if (start)
    {
        playTime += dt;
        
        down = true;
        if (hp &gt; 0)
        {
            if (up)
                down = false;
            
            if (up &amp;&amp; y &gt; 6)
                ymov -= yAcc * dt;
            
            if (down &amp;&amp; y &lt; room_height - 5)
                ymov += yAcc * dt;
            
            ymov = clamp(ymov, -yspd, yspd);
            
            if (y + ymov &gt;= 6 &amp;&amp; y + ymov &lt;= room_height - 5)
                y += ymov * dt;
            else
            {
                var side = -1;
                if (ymov &lt; 0)
                    side = 1;
                y = clamp(round(y + ymov), 6, room_height - 5);
                ymov = yspd * side;
                
                hp--;
                                        
                var partCount = irandom_range(2, 5);
                var scale;
                var c1 = make_color_rgb(239, 157, 219);
                var c2 = make_color_rgb(198, 139, 184);
                for (var i = 0; i &lt; partCount; i++)
                {
                    part = instance_create(x, y, obj_particle);
                    part.spd = random_range(1.2, 2.4);
                    part.life = irandom_range(3, 8);
                    part.dir = irandom_range(145, 215);
                    part.image_blend = choose(c1, c2);
                    part.rot = random_range(.4, 3);
                    part.image_angle = irandom_range(0, 360);
                    scale = random_range(1 / 4, 3 / 4);
                    part.image_xscale = scale;
                    part.image_yscale = scale;
                }
                
                audio_play_sound(snd_hit, 1, false);
            }
            
            image_index = 0;
            if (xprevious != x || yprevious != y)
                if (up)
                    image_index = 2;
                else if (down)
                        image_index = 1;
            /*if (ymov &gt; .07)
                image_index = 1;
            else if (ymov &lt; -.07)
                image_index = 2;*/
            
            if (shoottime &lt; shoottimecap)
            {
                shoottime -= dt;
                if (shoottime &lt;= 0)
                    shoottime = shoottimecap;
            }
            if (/*keyboard_check(ord("Z")) &amp;&amp; */shoottime == shoottimecap)
            {
                var off = 0;
                if (image_index == 2)
                    off = -1;
                var bullet = instance_create(x + 6, y + off, obj_bullet);
                bullet.x = x + 6;
                bullet.y = y + off;
                shoottime--;
                audio_play_sound(snd_shoot, 1, false);
            }
            
            if (invincibletime &lt; invincibletimecap)
            {
                invincibletime -= dt;
                if (invincibletime &lt;= 0)
                    invincibletime = invincibletimecap;
            }
            if (place_meeting(x, y, obj_rock))
            {
                var firstHit = false;
                var hit = false;
                if (invincibletime &lt; invincibletimecap)
                    hit = true;
                for (var i = 0; i &lt; instance_number(obj_rock); i++)
                {
                    var rock = instance_find(obj_rock, i);
                    if (place_meeting(x, y, rock) &amp;&amp; !rock.dead)
                    {
                        if (!hit)
                        {
                            hp--;
                            invincibletime--;
                            
                            var partCount = irandom_range(2, 5);
                            var scale;
                            var c1 = make_color_rgb(239, 157, 219);
                            var c2 = make_color_rgb(198, 139, 184);
                            for (var i = 0; i &lt; partCount; i++)
                            {
                                part = instance_create(x, y, obj_particle);
                                part.spd = random_range(1.2, 2.4);
                                part.life = irandom_range(3, 8);
                                part.dir = irandom_range(145, 215);
                                part.image_blend = choose(c1, c2);
                                part.rot = random_range(.4, 3);
                                part.image_angle = irandom_range(0, 360);
                                scale = random_range(1 / 4, 3 / 4);
                                part.image_xscale = scale;
                                part.image_yscale = scale;
                            }
                        }
                        if (!firstHit)
                        {
                            firstHit = true;
                            audio_play_sound(snd_hit, 1, false);
                        }
                        if (hp &gt; 0)
                        {
                            rock.dead = true;
                            audio_play_sound(snd_destroyrock, 1, false);
                        }
                        hit = true;
                    }
                }
            }
            
            //blink while invincible
            /*if (invincibletime &lt; invincibletimecap)
            {
                if ((invincibletime mod (invincibletimecap / 5)) &lt; 1)
                    image_alpha = !image_alpha;
            }
            else image_alpha = 1;*/
        }
            
        if (hp &gt; 0)
            if ((playTime) mod (room_speed * 5) &lt; 1)
                scr++;
        
        if (random(1) &lt; .025 + playTime / (room_speed * 200))
        {
            var rock = instance_create(room_width + 15, irandom_range(5, room_height - 5), obj_rock);
            if (rock.y &lt; 5 + rock.sprite_height / 2)
                rock.y = 5 + rock.sprite_height / 2;
            if (rock.y &gt; room_height - 5 - rock.sprite_height / 2)
                rock.y = room_height - 5 - rock.sprite_height / 2;
        }
        
        if (hp &lt;= 0)
        {
            if (scr &gt; hScr)
            {
                hScr = scr;
                saveScore();
            }
            if (deathtime == deathtimecap)
            {
                audio_play_sound(snd_explode, 1, false);
                instance_create(x, y, obj_explode);
                
                var part;
                part = instance_create(x, y, obj_particle);
                part.spd = random_range(.1, .7);
                part.life = -1;
                if (y &lt; room_height / 3)
                    part.dir = irandom_range(170, 370);
                else if (y &lt; room_height * 2 / 3)
                    part.dir = irandom_range(0, 360);
                else part.dir = irandom_range(-10, 190);
                part.image_blend = c_black;
                part.rot = random_range(1.5, 5);
                part.image_angle = irandom_range(0, 360);
                part.image_xscale = 1 / 2;
                part.image_yscale = 1 / 2;
            }
            deathtime -= dt;
            if ((mouse_check_button_pressed(mb_left) || mouse_check_button_pressed(mb_right) || keyboard_check_pressed(vk_up) || keyboard_check_pressed(vk_space)) &amp;&amp; deathtime &lt;= 0)
            {
                yspd = ySpdStart;
                ymov = 0;
                yAccStart = .04;
                yAcc = yAccStart;
                shoottime = shoottimecap;
                invincibletime = invincibletimecap;
                deathtime = deathtimecap;
                scr = 0;
                x = xstart;
                y = ystart;
                gameTimeStart = gametime - 1;
                playTime = 0;
                hp = hpStart;
                
                with (obj_rock)
                    instance_destroy();
                with (obj_bullet)
                    instance_destroy();
                with (obj_explode)
                    instance_destroy();
                with (obj_particle)
                    instance_destroy();
            }
        }
    }
}

if (keyboard_check_direct(vk_f3))
    screen_save(working_directory + "Screenshot " +  "[" + string(current_month) + "-" + string(current_day) + "-" + string(current_year) + "." + string(current_hour) + ";" + string(current_minute) + ";" + string(current_second) + "]" + ".png");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp &gt; 0)
{
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, 1);
    for (var a = 0; a &lt; hp; a++;)
    {
        draw_sprite_ext(spr_shield, 0, sprite_get_width(spr_pause) + 2 + a * 4, 2, 1, 1, 0, invertColor(image_blend), 1);
        draw_sprite_ext(spr_shield, 0, sprite_get_width(spr_pause) + 2 + a * 4, 2, .8, .8, 0, image_blend, 1);
    }
        
    if (shoottime &lt; shoottimecap)
    {
        var off = 0;
        if (image_index == 2)
            off = -1;
        draw_sprite_ext(spr_shoot, sprite_get_number(spr_shoot) - 1 - shoottime * (sprite_get_number(spr_shoot) - 1) / shoottimecap, x + 4, y + off, 1, 1, 0, image_blend, 1);
    }
}
/*else
{
    draw_set_font(fnt_small);
    draw_set_halign(fa_right);
    draw_text(room_width, string_height("r"), "High Score: " + string(hScr));
    draw_set_halign(fa_left);
}*/
draw_set_font(fnt_small);
//draw_set_halign(fa_right);
drawNums(room_width, 0, scr);
//draw_set_halign(fa_left);
//draw_text(0, 0, fps);
//draw_text(0, string_height("r"), surfaceDiv);

draw_set_font(fnt_small);
//draw_text(0, room_height - string_height("r") * 2, string(display_get_width()) + " " + string(window_get_width()) + " " + string(view_wport[0]) + " " + string(view_wview[0]));
//draw_text(0, room_height - string_height("r"), string(display_get_height()) + " " + string(window_get_height()) + " " + string(view_hport[0]) + " " + string(view_hview[0]));

if (hp &lt;= 0)
{
    //draw_set_font(fnt_giant);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    var stH = string_height("r");
    draw_text(view_wview[0] / 2, view_hview[0] / 2 + stH / 2, "Tap to Restart");
    //draw_set_valign(fa_bottom);
    //draw_set_font(fnt_large);
    draw_text(view_wview[0] / 2, view_hview[0] / 2 - stH / 2, "High Score: " + string(hScr));
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
}

if (!start)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(view_wview[0] / 2, view_hview[0] / 2, "Tap to Start");
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
}
else if (pause)
{
    draw_set_alpha(.5);
    draw_set_color(c_black);
    draw_rectangle(0, 0, room_width, room_height, false);
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(view_wview[0] / 2, view_hview[0] / 2, "Tap to Resume");
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
}
else if (hp &gt; 0)
    draw_sprite(spr_pause, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,2</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
