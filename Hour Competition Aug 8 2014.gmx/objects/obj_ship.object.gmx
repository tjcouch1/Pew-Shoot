<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_size(800, 450);
instance_create(x, y, object4);

for (var a = 0; a &lt; room_width / 4 + 1; a++;)
{
    instance_create(a * 4, 0, obj_block);
    instance_create(a * 4, room_height - 4, obj_block);
}

hpcap = 5;
hp = 3;
ymov = 1;
up = false;
down = false;
shoottimecap = room_speed / 5;
shoottime = shoottimecap;
invincibletimecap = room_speed;
invincibletime = invincibletimecap;

deathtime = room_speed * 4;
deathtimecap = room_speed * 4;

gametime = 0;

image_speed = 0;

scr = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>up = keyboard_check(vk_up);
down = keyboard_check(vk_down);

if (up &amp;&amp; down)
{
    up = false;
    down = false;
}

if (up &amp;&amp; y &gt; 6)
    y -= ymov;

if (down &amp;&amp; y &lt; room_height - 5)
    y += ymov;
    
image_index = 0;
if (xprevious != x || yprevious != y)
    if (up)
        image_index = 2;
    else if (down)
            image_index = 1;
    
if (shoottime &lt; shoottimecap)
{
    shoottime--;
    if (shoottime &lt;= 0)
        shoottime = shoottimecap;
}
if (keyboard_check(ord("Z")) &amp;&amp; shoottime == shoottimecap)
{
    instance_create(x + 5, y, obj_bullet);
    shoottime--;
    audio_play_sound(snd_shoot, 1, false);
}

if (invincibletime &lt; invincibletimecap)
{
    invincibletime--;
    if (invincibletime &lt;= 0)
        invincibletime = invincibletimecap;
}
if (place_meeting(x, y, obj_rock) &amp;&amp; invincibletime == invincibletimecap)
{
    hp -= 1;
    invincibletime--;
    var rock = instance_place(x, y, obj_rock);
    with (rock)
        instance_destroy();
    audio_play_sound(snd_hit, 1, false);
}

if (invincibletime &lt; invincibletimecap)
{
    if ((invincibletime mod (invincibletimecap / 5)) == 0)
        image_alpha = !image_alpha;
}
else image_alpha = 1;

gametime++;

if (gametime mod (room_speed * 5) == 0)
    scr++;
    
image_blend = make_color_hsv((gametime / 20 mod 360), 255, 255);
with (obj_block)
    image_blend = make_color_hsv(((other.gametime + 180 / 20) + 180 mod 360), 255, 255);


if (random(1) &lt; .02 + gametime / (room_speed * 120))
{
    var rock = instance_create(room_width + 5, irandom_range(4, room_height - 4), obj_rock);
    if (rock.x &lt; 4 + sprite_get_height(rock.sprite_index) / 2)
        rock += sprite_get_height(rock.sprite_index) / 2;
    if (rock.x &gt; room_height - 4 - sprite_get_height(rock.sprite_index) / 2)
        rock -= sprite_get_height(rock.sprite_index) / 2;
}

if (hp &lt;= 0)
{
    if (deathtime == deathtimecap)
        audio_play_sound(snd_explode, 1, false);
    deathtime--;
    if (deathtime &lt;= 0)
        room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp &gt; 0)
{
    draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, 0, c_white, 1);
    for (var a = 0; a &lt; hp; a++;)
        draw_sprite_ext(spr_shield, 0, 2 + a * 4, 2, 1, 1, 0, image_blend, 1);
        
    if (shoottime &lt; shoottimecap)
        draw_sprite_ext(spr_shoot, sprite_get_number(spr_shoot) - 1 - shoottime * (sprite_get_number(spr_shoot) - 1) / shoottimecap, x + 4, y, 1, 1, 0, image_blend, 1);
}
draw_set_halign(fa_right);
draw_text(room_width, 0, scr);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>4,2</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
